WEBVTT

1
00:00:07.890 --> 00:00:10.260
Welcome to lecture one of module two.

2
00:00:10.260 --> 00:00:14.910
In this lecture,
we'll discuss the brief history of Ruby.

3
00:00:14.910 --> 00:00:19.130
We'll also go over why Ruby is such
an interesting language to learn,

4
00:00:19.130 --> 00:00:21.550
among the other myriad of
programming languages out there.

5
00:00:23.160 --> 00:00:27.170
We'll also cover some basic Ruby
principles and conventions.

6
00:00:27.170 --> 00:00:29.860
Ruby was invented by Yukihiro Matsumoto,

7
00:00:29.860 --> 00:00:33.780
who people affectionately call Matz,
around 1996.

8
00:00:33.780 --> 00:00:37.456
It sort of stayed quiet
after that until about 2005,

9
00:00:37.456 --> 00:00:41.300
when it became popularized by
the Ruby on Rails framework.

10
00:00:42.510 --> 00:00:43.873
Ruby is dynamic, so

11
00:00:43.873 --> 00:00:49.580
if you're used to language like Java that
is statically tight, this is different.

12
00:00:50.580 --> 00:00:55.680
Ruby is also object oriented and pretty
much everything in Ruby is an object.

13
00:00:56.760 --> 00:01:02.730
Again, making reference to Java, there's
no such thing as a primitive type in Ruby,

14
00:01:02.730 --> 00:01:05.840
even an integer is a full fledged object.

15
00:01:05.840 --> 00:01:09.920
But, most importantly, Ruby is elegant,
expressive, and declarative.

16
00:01:09.920 --> 00:01:13.110
These are the three words I would
use to describe it as a language.

17
00:01:13.110 --> 00:01:19.270
And like Max himself once said, Ruby
was designed to make programmers happy.

18
00:01:19.270 --> 00:01:22.640
So that's nice to use as slogan but
what does it really mean?

19
00:01:22.640 --> 00:01:24.970
Let's take a look at a real example.

20
00:01:24.970 --> 00:01:27.550
Let's say we have a task in front of us.

21
00:01:27.550 --> 00:01:29.990
To print Hello World three times.

22
00:01:29.990 --> 00:01:32.080
How would you accomplish
this task in Java?

23
00:01:32.080 --> 00:01:35.090
Well in Java you would have a class,
you would have a main,

24
00:01:35.090 --> 00:01:37.410
you would have a for loop and
you would have an i variable for

25
00:01:37.410 --> 00:01:42.110
example that goes from zero to three and
it keeps getting incremented.

26
00:01:42.110 --> 00:01:46.172
Then we actually have
the business logic inside the for

27
00:01:46.172 --> 00:01:49.020
loop that prints out Hello World.

28
00:01:49.020 --> 00:01:50.750
What is wrong with this program?

29
00:01:50.750 --> 00:01:53.310
There is nothing wrong with it,
but if you notice,

30
00:01:53.310 --> 00:01:55.820
your brain is doing two different
things at the same time.

31
00:01:55.820 --> 00:01:58.369
Your brain is keeping track of the for
loop, and

32
00:01:58.369 --> 00:02:02.280
your brain is also keeping track of
a business logic inside the for loop.

33
00:02:03.320 --> 00:02:07.250
Whereas what you really want to do,
is you want to do something

34
00:02:07.250 --> 00:02:12.290
that Ruby lets you do is just say
three times puts "Hello World".

35
00:02:12.290 --> 00:02:17.560
And you could do this
because 3 is a full fledged

36
00:02:17.560 --> 00:02:22.400
object and times is just a method,
and we'll discuss what this is later.

37
00:02:23.560 --> 00:02:25.440
Back to some Ruby basics.

38
00:02:25.440 --> 00:02:30.880
So in Ruby you have a two space
indentation for each nested level.

39
00:02:30.880 --> 00:02:36.830
That's encouraged, it's not required
like in Python, but it is encouraged.

40
00:02:36.830 --> 00:02:40.350
And you use pound for comments.

41
00:02:40.350 --> 00:02:44.010
Now, again comments should be used in
moderation because the language itself is

42
00:02:44.010 --> 00:02:46.830
designed to be very expressive.

43
00:02:48.320 --> 00:02:50.550
So here are some examples
on how you do that.

44
00:02:50.550 --> 00:02:52.240
Now, look at this over here.

45
00:02:52.240 --> 00:02:53.580
Three, what is three?

46
00:02:53.580 --> 00:02:57.380
Well three is probably the shortest
Ruby program you'll ever write,

47
00:02:57.380 --> 00:03:00.560
it basically is an integer
that gets evaluated.

48
00:03:00.560 --> 00:03:04.060
As a matter of fact, pretty much
everything in Ruby gets evaluated.

49
00:03:05.690 --> 00:03:10.790
Maybe in some other languages three would
be flagged by a compiler as an error

50
00:03:10.790 --> 00:03:15.840
because this three is not doing anything,
it's not being assigned to a variable,

51
00:03:15.840 --> 00:03:19.589
it's not used as part of a different
statement, so what is three?

52
00:03:19.589 --> 00:03:20.410
But that's okay.

53
00:03:20.410 --> 00:03:25.200
In Ruby it is perfectly
legal to have that.

54
00:03:25.200 --> 00:03:29.880
The three gets evaluated, and
well see later on how that's useful.

55
00:03:29.880 --> 00:03:33.560
In my slides, a lot of times I'll use puts

56
00:03:33.560 --> 00:03:37.260
to show you that something is
being printed out to the console.

57
00:03:37.260 --> 00:03:44.470
Puts stands for put string, that's just
the concatenation of those two words.

58
00:03:44.470 --> 00:03:48.880
Puts, and it also prints a new
line after that, after itself.

59
00:03:48.880 --> 00:03:52.900
So, it's similar to how
system.out.println works in Java.

60
00:03:52.900 --> 00:03:56.940
There is also another form that I
will use sometimes, which is P, and

61
00:03:56.940 --> 00:04:00.580
this just prints out internal
representation of an object, and

62
00:04:00.580 --> 00:04:05.570
sometimes it is useful instead of puts,
and I'll show you when.

63
00:04:05.570 --> 00:04:09.559
If you have a Ruby file,

64
00:04:09.559 --> 00:04:16.600
let's say test.rb, for example, where
it just has puts 3 to execute the file.

65
00:04:16.600 --> 00:04:21.166
If you're doing it from Sublime,
you would do command+B, or

66
00:04:21.166 --> 00:04:24.280
control+B if you're on Windows.

67
00:04:24.280 --> 00:04:28.730
And if you wanna execute the file from
a command line, you would just do Ruby,

68
00:04:28.730 --> 00:04:31.310
space, and the name of the file.

69
00:04:31.310 --> 00:04:37.060
And hopefully you're following along with
your own laptop and banging out some code.

70
00:04:38.360 --> 00:04:41.220
Okay, some more conventions,
we have variables.

71
00:04:42.350 --> 00:04:46.450
Variables should all be named lower case,
or

72
00:04:46.450 --> 00:04:50.090
if you have multiple words
in the same variable name,

73
00:04:50.090 --> 00:04:54.550
you should use what's called a snake case,
which is basically an underscore

74
00:04:54.550 --> 00:04:59.010
in between the two words that you
are trying to name a variable with.

75
00:05:00.240 --> 00:05:02.850
If you have a constant,
something that's never gonna change, for

76
00:05:02.850 --> 00:05:08.450
example the value of pi,
you would use either all caps or

77
00:05:08.450 --> 00:05:14.320
you would use what's called a CamelCase
where the first letter is capitalized.

78
00:05:14.320 --> 00:05:19.235
So basically as long as the first letter
is capitalized, you're fine for constants.

79
00:05:19.235 --> 00:05:23.830
In classes and modules, for their names,

80
00:05:23.830 --> 00:05:28.600
you would also use a CamelCase where
the first letter is capitalized.

81
00:05:29.820 --> 00:05:33.990
Semicolons, there's no
reason to have semicolons.

82
00:05:33.990 --> 00:05:35.730
A lot of times they just post the code so

83
00:05:35.730 --> 00:05:39.240
you could happily leave semicolons
off at the end of a line.

84
00:05:40.630 --> 00:05:45.000
Now if you do wanna have multiple
statements on the same line,

85
00:05:45.000 --> 00:05:50.900
then you can use a semicolon in between
those two statements to separate them,

86
00:05:50.900 --> 00:05:53.270
but this is usually highly discouraged.

87
00:05:53.270 --> 00:05:57.380
Putting multiple statements in the same
line makes the code less readable.

88
00:05:57.380 --> 00:06:02.920
I will do it sometimes in my slides
just if I want to show a complete

89
00:06:02.920 --> 00:06:08.090
example in my slides, but
there is really no reason to do that.

90
00:06:08.090 --> 00:06:15.650
Another way to execute Ruby code
is to use something called IRB.

91
00:06:15.650 --> 00:06:20.380
IRB is basically interactive Ruby,
it's a REPL if you're familiar with that.

92
00:06:20.380 --> 00:06:24.020
That's basically
Read Evaluate Print Loop so

93
00:06:24.020 --> 00:06:30.110
you're able to type IRB in the command
line, this comes with a Ruby installation,

94
00:06:30.110 --> 00:06:36.340
and just start plugging away putting in
Ruby code, so for example, hello world.

95
00:06:37.520 --> 00:06:39.590
Well, you might ask what is hello world?

96
00:06:39.590 --> 00:06:41.160
It's not been printed out.

97
00:06:42.490 --> 00:06:45.696
But the IRB will tell
you that that's okay.

98
00:06:45.696 --> 00:06:50.396
It's just a string variable
that's been evaluated and

99
00:06:50.396 --> 00:06:53.600
it will get evaluated to hello world.

100
00:06:54.630 --> 00:06:59.600
Now, you also could print out hello world,
which is what this is doing, and

101
00:06:59.600 --> 00:07:02.150
this is saying puts hello world.

102
00:07:02.150 --> 00:07:08.180
So, you'll see that as a side effect of
the puts method, hello world gets printed,

103
00:07:08.180 --> 00:07:13.620
now, what puts actually returns is a nil,
doesn't return anything.

104
00:07:13.620 --> 00:07:19.440
So, if you think about it, puts is
just the method that returns nothing,

105
00:07:19.440 --> 00:07:23.310
but as part of its execution,
it prints out hello world.

106
00:07:24.910 --> 00:07:30.000
So, again, important concept, but anything
evaluates to something, pretty much.

107
00:07:31.010 --> 00:07:34.286
And you don't have to assign something
to a variable for it to get evaluated,

108
00:07:34.286 --> 00:07:39.680
and another thing to note here
is that puts returns nil.

109
00:07:39.680 --> 00:07:42.330
So in summary,
Ruby is extremely expressive and

110
00:07:42.330 --> 00:07:46.240
hopefully you've seen this from
the few slides that we just did.

111
00:07:46.240 --> 00:07:50.410
And the other concept you should
take away is that everything, and

112
00:07:50.410 --> 00:07:55.410
I mean everything, is evaluated in Ruby,
and we'll see how that's useful later on.

113
00:07:55.410 --> 00:07:56.500
So, what are we doing next?

114
00:07:56.500 --> 00:07:59.310
Next, we're going to talk about
the flow of control in Ruby.